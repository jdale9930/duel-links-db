{"version":3,"sources":["Redux/Actions/DeckActions.js","Redux/Actions/SearchActions.js","Redux/Actions/UserActions.js","components/cardDisplay.js","components/infoDisplay.js","components/deckBuilder.js","components/duelSim.js","components/deck.js","components/login.js","Redux/Reducers/DeckReducer.js","Redux/Reducers/UserReducer.js","Redux/Reducers/index.js","Redux/Reducers/SearchReducer.js","Redux/store.js","Redux/Selectors/UserSelectors.js","components/shared/ProtectedRoute.js","App.js","reportWebVitals.js","index.js"],"names":["ADD_TO_DECK","REMOVE_FROM_DECK","addToDeck","card","type","removeFromDeck","SET_SEARCH","CLEAR_SEARCH","setSearch","search","clearSearch","SET_CURRENT_NAME","SET_CURRENT_ID","CLEAR_USER","setCurrentUser","name","clearUser","CardDisplay","props","info","id","effect","atk","def","level","race","attribute","archetype","image_big","image_small","className","src","alt","onClick","evt","setCardInfo","mapDispatchToProps","connect","state","deck","cardId","mainDeck","extraDeck","username","user","userId","length","disabled","useState","cardSearch","setCardSearch","error","setError","setAttribute","setLevel","setRace","setType","mst","setMst","cardInfo","a","searchURL","attributeURL","levelURL","raceURL","typeURL","url","fetch","response","json","console","log","searchResults","data","map","v","desc","card_images","image_url","image_url_small","placeholder","value","onChange","target","getCards","loc","DuelSim","setCurrentId","setUsername","password","setPassword","history","useHistory","method","headers","body","JSON","stringify","push","signup","login","counter","initialState","rootReducer","combineReducers","action","newExtraDeck","idxE","findIndex","splice","newMainDeck","idxM","createStore","userSelector","usernameSelector","ProtectedRoute","isAuth","authRequired","component","path","redirect","to","App","useActionCreators","clearUserFromState","setUserInState","useSelectors","useMemo","axios","useEffect","get","success","store","activeClassName","logout","Login","DeckBuilder","authReauired","Deck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.898ada89.chunk.js","sourcesContent":["export const ADD_TO_DECK = \"Add to deck\"\nexport const REMOVE_FROM_DECK = \"Remove from deck\"\n\nexport function addToDeck(card){\n    return{type: ADD_TO_DECK, card: card}\n}\n\nexport function removeFromDeck(card){\n    return{type: REMOVE_FROM_DECK, card: card}\n}","export const SET_SEARCH = \"Set Search\"\nexport const CLEAR_SEARCH = \"Clear Search\"\n\nexport function setSearch(search){\n    return{type: SET_SEARCH, search: search}\n}\n\nexport function clearSearch(){\n    return{type: CLEAR_SEARCH}\n}","export const SET_CURRENT_NAME = \"Set current name\"\nexport const SET_CURRENT_ID = \"Set current id\"\nexport const CLEAR_USER = \"Clear user\"\n\nexport function setCurrentUser(name){\n    return{type: SET_CURRENT_NAME, name: name}\n}\n\nexport function setCurrentId(id){\n    return{type: SET_CURRENT_ID, id: id}\n}\n\nexport function clearUser(){\n    return{type: CLEAR_USER}\n}","import {React} from \"react\"\nimport \"./cardDisplay.css\"\n//import InfoDisplay from \"./infoDisplay\"\n\nconst CardDisplay = (props) => {\n    const info = {\n        id: props.id, \n        name: props.name, \n        type: props.type, \n        effect: props.effect,\n        atk: props.atk, \n        def: props.def,\n        level: props.level,\n        race: props.race,\n        attribute: props.attribute,\n        archetype: props.archetype,\n        image_big: props.image_big,\n        image_small: props.image_small,\n\n    }\n    return(\n        <div>\n        <img className = \"card\"src = {props.image_big} alt={`${props.name}`}\n        onClick = {(evt) => {\n        props.setCardInfo(info) \n        }}>\n        </img>\n        </div>\n    )\n}\n\nexport default CardDisplay;","import {React} from \"react\"\nimport \"./infoDisplay.css\"\nimport {connect} from \"react-redux\";\nimport {addToDeck, removeFromDeck, setSearch, clearSearch} from \"../Redux/Actions\";\nimport axios from \"axios\"\n\nconst InfoDisplay = (props) =>\n{\n    return(\n        <div className = \"infoContainer\">\n            {props.info.image_big.length > 0 ?\n            <>\n            <button onClick = {() => \n                {}}>\n            Add To Deck</button>\n            <button onClick = {() => {props.removeFromDeck(props.info)}}>\n            Remove From Deck</button>\n            <img className = \"infoImage\" alt = {props.info.name} src = {props.info.image_big}></img>\n            </>\n            :\n            <>\n            <button disabled>Add to Deck</button>\n            <button disabled>Remover From Deck</button>\n            <img className = \"infoImage\" alt = \"\"></img>\n            </>\n            }\n            <div className = \"cardTitle\">{props.info.name}</div>\n            {props.info.type !== \"Spell Card\" &&\n            props.info.type !== \"Trap Card\" ?\n            <>\n            <div className=\"infoText\">\n                <div className = \"textRow\">Level: {props.info.level}</div>\n                <div className = \"textRow\">{props.info.type}</div>\n            </div>\n            <div className =\"infoText\">\n                <div className = \"textRow\">Type: {props.info.race}</div>\n                <div className = \"textRow\">Attribute: {props.info.attribute}</div>\n            </div>\n            <div className =\"infoText\">\n                <div className = \"textRow\">ATK: {props.info.atk}</div>\n                <div className = \"textRow\">DEF: {props.info.def}</div>\n            </div>\n            </>\n            :\n            <div className = \"infoText\">\n                <div className = \"textRow\">{props.info.type}</div>\n                <div className = \"textRow\">Type: {props.info.race}</div>\n\n            </div>\n            }\n            <div className = \"effectText\">{props.info.effect}</div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state){\n    return{\n        deck: state.deck,\n        card: state.deck.card,\n        cardId: state.deck.id,\n        search: state.search,\n        mainDeck: state.deck.mainDeck,\n        extraDeck: state.deck.extraDeck,\n        username: state.user.username,\n        userId: state.user.id\n    }\n}\n\nconst mapDispatchToProps ={\n    addToDeck,\n    removeFromDeck,\n    setSearch,\n    clearSearch,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(InfoDisplay);","import {React, useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {addToDeck, removeFromDeck, setSearch, clearSearch} from \"../Redux/Actions\";\nimport CardDisplay from \"./cardDisplay\"\nimport \"./deckBuilder.css\"\nimport InfoDisplay from \"./infoDisplay\"\n\nconst DeckBuilder = (props) => {\n\n    const [cardSearch, setCardSearch] = useState([])\n    const [error, setError] = useState(\"\");\n    const [attribute, setAttribute] = useState(\"\")\n    const [level, setLevel] = useState(\"\")\n    const [race, setRace] = useState(\"\")\n    const [type, setType] = useState(\"\")\n    const [mst, setMst] = useState(\"\")\n    const [cardInfo, setCardInfo] = useState({\n        id: \"\", \n        name: \"\", \n        type: \"\", \n        effect: \"\",\n        atk: \"\", \n        def: \"\",\n        level: \"\",\n        race: \"\",\n        attribute: \"\",\n        archetype: \"\",\n        image_big: \"\",\n        image_small: \"\",\n    })\n\n    async function getCards(search, attribute, level, race, type,)\n    {\n        let searchURL = \"\"\n        let attributeURL = \"\"\n        let levelURL = \"\"\n        let raceURL = \"\"\n        let typeURL = \"\"\n\n        // console.log(mst)\n        // console.log(type)\n        search !== \"\" && (searchURL = `&fname=${search}`)\n        attribute !== \"\" && (attributeURL = `&attribute=${attribute}`)\n        level !== \"\" && (levelURL = `&level=${level}`)\n        race !== \"\" && (raceURL = `&race=${race}`)\n        type !== \"\" && (typeURL = `&type=${type}`)\n        const url = `https://db.ygoprodeck.com/api/v7/cardinfo.php?format=duel%20links${searchURL}${attributeURL}${levelURL}${raceURL}${typeURL}`\n        //console.log(url)\n        try{\n            setError(\"\")\n            let response = await fetch(url);\n            let json = await response.json();\n            console.log(json)\n            let searchResults = json.data.map((v) => {\n                return {\n                    id: v.id, \n                    name: v.name, \n                    type: v.type, \n                    effect: v.desc,\n                    atk: v.atk, \n                    def: v.def,\n                    level: v.level,\n                    race: v.race,\n                    attribute: v.attribute,\n                    archetype: v.archetype,\n                    image_big: v.card_images[0].image_url,\n                    image_small: v.card_images[0].image_url_small,\n                }\n            })\n            //console.log(searchResults)\n            setCardSearch(searchResults)\n        }\n         catch(evt){\n             setError(\"Something went wrong!\")\n         }\n    }\n\n\n    return(\n        <div>\n            <div className = \"searchBox\">\n            <div className = \"columnBox\">\n            <input placeholder = \"Card Name...\"type = \"text\" value = {props.search}\n            onChange = {(evt) => {props.setSearch(evt.target.value)}}>\n            </input>\n            <select value = {mst} onChange = {(evt)=> {\n                setType(evt.target.value)\n                setMst(evt.target.value)\n                setRace(\"\")}}>\n                <option value = \"\">Card</option>\n                <option value = \"Spell Card\">Spell</option>\n                <option value = \"Trap Card\">Trap</option>\n                <option value = \"Normal Monster,Effect Monster\">Monster</option>\n            </select>\n\n                {mst === \"Spell Card\" && \n                    <select value = {race} onChange = {(evt) => {setRace(evt.target.value)}}>\n                        <option value = \"\">Card Type</option>\n                        <option value = \"Normal\">Normal</option>\n                        <option value = \"Field\">Field</option>\n                        <option value = \"Equip\">Equip</option>\n                        <option value = \"Continuous\">Continuous</option>\n                        <option value = \"Quick-Play\">Quick-Play</option>\n                        <option value = \"Ritual\">Ritual</option>\n                    </select>\n                }\n\n                {mst === \"Trap Card\" && \n                    <select value = {race} onChange = {(evt) => {setRace(evt.target.value)}}>\n                        <option value = \"\">Card Type</option>\n                        <option value = \"Normal\">Normal</option>\n                        <option value = \"Continuous\">Continuous</option>\n                        <option value = \"Counter\">Counter</option>\n                    </select>\n                }\n\n                {mst === \"Normal Monster,Effect Monster\" && \n                    <select value = {type} onChange = {(evt) => {setType(evt.target.value)}}>\n                        <option value = \"\">Card Type</option>\n                        <option value = \"Normal Monster\">Normal</option>\n                        <option value = \"Effect Monster\">Effect</option>\n                        <option value = \"Flip Effect Monster\">Flip</option>\n                        <option value = \"Tuner Monster,Normal Tuner Monster\">Tuner</option>\n                        <option value = \"Union Effect Monster\">Union</option>\n                        <option value = \"Spirit Monster\">Spirit</option>\n                        <option value = \"Toon Monster\">Toon</option>\n                        <option value = \"Ritual Monster,Ritual Effect Monster\">Ritual</option>\n                        <option value = \"Fusion Monster\">Fusion</option>\n                        <option value = \"Synchro Monster,Synchro Tuner Monster\">Synchro</option>\n                        <option value = \"XYZ Monster\">XYZ</option>\n                    </select>\n                }\n                {mst === \"\" &&\n                    <select disabled>\n                        <option>Card Type</option>\n                    </select>\n                }\n            </div>\n\n            <div className = \"columnBox\">\n            {mst !== \"Spell Card\" &&\n            mst !== \"Trap Card\" ?\n            <>\n            <div>\n            <select className = \"input\" value = {attribute} onChange = {(evt) => {setAttribute(evt.target.value)}}>\n                <option value = \"\">Attribute</option>\n                <option value =\"EARTH\">Earth</option>\n                <option value =\"FIRE\">Fire</option>\n                <option value =\"WATER\">Water</option>\n                <option value =\"WIND\">Wind</option>\n                <option value =\"LIGHT\">Light</option>\n                <option value =\"DARK\">Dark</option>\n                <option value =\"DIVINE\">Divine</option>\n            </select>\n            </div>\n\n            <div>\n            <select className = \"input\" value = {level} onChange = {(evt) => {setLevel(evt.target.value)}}>\n                <option value = \"\">Level/Rank</option>\n                <option value = \"1\">1</option>\n                <option value = \"2\">2</option>\n                <option value = \"3\">3</option>\n                <option value = \"4\">4</option>\n                <option value = \"5\">5</option>\n                <option value = \"6\">6</option>\n                <option value = \"7\">7</option>\n                <option value = \"8\">8</option>\n                <option value = \"9\">9</option>\n                <option value = \"10\">10</option>\n                <option value = \"11\">11</option>\n                <option value = \"12\">12</option>\n            </select>\n            </div>\n            <div>\n            <select className = \"input\" value = {race} onChange = {(evt) => {setRace(evt.target.value)}}>\n                <option value = \"\">Monster Type</option>\n                <option value = \"Aqua\">Aqua</option>\n                <option value = \"Beast\">Beast</option>\n                <option value = \"Beast-Warrior\">Beast-Warrior</option>\n                <option value = \"Cyberse\">Cyberse</option>\n                <option value = \"Dinosaur\">Dinosaur</option>\n                <option value = \"Divine-Beast\">Divine-Beast</option>\n                <option value = \"Dragon\">Dragon</option>\n                <option value = \"Fairy\">Fairy</option>\n                <option value = \"Fiend\">Fiend</option>\n                <option value = \"Fish\">Fish</option>\n                <option value = \"Insect\">Insect</option>\n                <option value = \"Machine\">Machine</option>\n                <option value = \"Plant\">Plant</option>\n                <option value = \"Psychic\">Psychic</option>\n                <option value = \"Pyro\">Pyro</option>\n                <option value = \"Reptile\">Reptile</option>\n                <option value = \"Rock\">Rock</option>\n                <option value = \"Sea Serpent\">Sea Serpent</option>\n                <option value = \"Spellcaster\">Spellcaster</option>\n                <option value = \"Thunder\">Thunder</option>\n                <option value = \"Warrior\">Warrior</option>\n                <option value = \"Winged-Beast\">Winged-Beast</option>\n                <option value = \"Zombie\">Zombie</option>\n            </select>\n            </div>\n            </>\n             : \n            <>\n            {attribute !== \"\" && setAttribute(\"\")}\n            {level !== \"\" && setLevel(\"\")}\n                <div>\n                    <select className = \"input\" disabled>\n                        <option>Attribute</option>\n                    </select>\n                </div>\n                <div>\n                    <select className = \"input\" disabled>\n                        <option>Level/Rank</option>\n                    </select>\n                </div>\n                <div>\n                    <select className = \"input\" disabled>\n                        <option>Type</option>\n                    </select>\n                </div>\n            </>\n            \n            }\n            </div>\n            <div className = \"columnBox\">\n            <button className = \"searchButton\" onClick = {() => {\n                    getCards(props.search, attribute, level, race, type)\n                }}\n            >Search</button>\n            <button className = \"searchButton\" onClick = {() => {\n                props.clearSearch()\n                setAttribute(\"\")\n                setLevel(\"\")\n                setRace(\"\")\n                setType(\"\")\n                setMst(\"\")\n                }\n            }\n            >Clear Search</button>\n            </div>\n            </div>\n            <select></select> \n\n            <div className = \"searchContainer\">\n            {error.length > 0 && <h1>{error}</h1>}\n            {error.length === 0 && \n            cardSearch.map((v) => \n            <CardDisplay \n            key = {v.id} \n            id = {v.id} \n            name = {v.name}\n            type = {v.type}\n            effect = {v.effect}\n            atk = {v.atk} \n            def = {v.def}\n            level = {v.level}\n            race = {v.race}\n            attribute = {v.attribute}\n            archetype = {v.archetype}\n            image_big = {v.image_big}\n            image_small = {v.image_small}\n            cardInfo = {cardInfo}\n            setCardInfo = {setCardInfo}\n            />)}\n            </div>\n            <div>\n                <InfoDisplay loc = \"deckBuilder\"info = {cardInfo} cardInfo = {cardInfo} setCardInfo = {setCardInfo}></InfoDisplay>\n            </div>\n        </div>\n    )\n}\n\nfunction mapStateToProps(state){\n    return{\n        deck: state.deck,\n        card: state.deck.card,\n        cardId: state.deck.id,\n        search: state.search,\n    }\n}\n\nconst mapDispatchToProps ={\n    addToDeck,\n    removeFromDeck,\n    setSearch,\n    clearSearch,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(DeckBuilder);","import React from \"react\"\n\nconst DuelSim = () => {\n\n    return(\n        <div>DuelSim</div>\n    )\n}\n\nexport default DuelSim","import {React, useState} from \"react\"\nimport CardDisplay from \"./cardDisplay\"\nimport InfoDisplay from \"./infoDisplay\"\nimport {connect} from \"react-redux\";\nimport {addToDeck, removeFromDeck, setSearch, clearSearch} from \"../Redux/Actions\";\nimport \"./deck.css\"\n\nconst Deck = (props) => {\n    const [cardInfo, setCardInfo] = useState({\n        id: \"\", \n        name: \"\", \n        type: \"\", \n        effect: \"\",\n        atk: \"\", \n        def: \"\",\n        level: \"\",\n        race: \"\",\n        attribute: \"\",\n        archetype: \"\",\n        image_big: \"\",\n        image_small: \"\",\n    })\n    return(\n        <>\n        <div className = \"searchContainer\">\n            {props.mainDeck.map((v) =>\n            <CardDisplay\n            key = {v.id} \n            id = {v.id} \n            name = {v.name}\n            type = {v.type}\n            effect = {v.effect}\n            atk = {v.atk} \n            def = {v.def}\n            level = {v.level}\n            race = {v.race}\n            attribute = {v.attribute}\n            archetype = {v.archetype}\n            image_big = {v.image_big}\n            image_small = {v.image_small}\n            cardInfo = {cardInfo}\n            setCardInfo = {setCardInfo}\n            ></CardDisplay>\n            )}\n            </div>\n            <div className = \"extraDeck\">\n            {props.extraDeck.map((v) =>\n            <CardDisplay\n            key = {v.id} \n            id = {v.id} \n            name = {v.name}\n            type = {v.type}\n            effect = {v.effect}\n            atk = {v.atk} \n            def = {v.def}\n            level = {v.level}\n            race = {v.race}\n            attribute = {v.attribute}\n            archetype = {v.archetype}\n            image_big = {v.image_big}\n            image_small = {v.image_small}\n            cardInfo = {cardInfo}\n            setCardInfo = {setCardInfo}\n            ></CardDisplay>\n            )}\n            </div>\n            <InfoDisplay loc = \"deck\"info = {cardInfo} cardInfo = {cardInfo} setCardInfo = {setCardInfo}></InfoDisplay>\n\n            </>\n    )\n}\n\nfunction mapStateToProps(state){\n    return{\n        deck: state.deck,\n        card: state.deck.card,\n        cardId: state.deck.id,\n        search: state.search,\n        mainDeck: state.deck.mainDeck,\n        extraDeck: state.deck.extraDeck,\n    }\n}\n\nconst mapDispatchToProps ={\n    addToDeck,\n    removeFromDeck,\n    setSearch,\n    clearSearch,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Deck);","import {React, useState} from \"react\"\nimport {connect} from \"react-redux\"\nimport {setCurrentUser, setCurrentId} from \"../Redux/Actions\";\nimport {useHistory} from \"react-router-dom\"\n//import axios from \"axios\"\nconst Login = (props) =>{\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [error, setError] = useState(\"\")\n    const history = useHistory()\n\n    async function signup(data){\n        setError(\"\")\n        try{\n            const response = await fetch(`/users/signup`, {\n                method: `POST`,\n                headers: {\n                    \"Content-Type\":\"application/json\"},\n                body: JSON.stringify({\n                    username: data.username,\n                    password: data.password\n                })\n            })\n            const json = await response.json();\n            if(json.error){\n                setError(json.error)\n            }\n            else{\n                props.setCurrentUser(json.data.username)\n                props.setCurrentId(json.data.id)\n                history.push(\"/deckBuilder\")\n            }\n        }\n         catch(err){\n             console.log(\"Line 31\")\n             setError(\"Something went wrong! Please try again later!\")\n             console.log(error)\n         }\n    }\n\n    async function login(data){\n        setError(\"\")\n        try{\n            const response = await fetch(`/users/login`, {\n                method: `POST`,\n                headers: {\n                    \"Content-Type\":\"application/json\"},\n                body: JSON.stringify({\n                    username: data.username,\n                    password: data.password\n                })\n            })\n            const json = await response.json();\n            if(json.data.error){\n                console.log(\"line 50\")\n                setError(json.data.error)\n            }\n            else{\n                console.log(json)\n                console.log(json.data.username)\n                props.setCurrentUser(json.data.username)\n                console.log(props.username)\n                props.setCurrentId(json.data.id)\n                history.push(\"/deckBuilder\")\n            }\n        }\n         catch(err){\n             console.log(\"Line 58\")\n             //setError(\"Something went wrong! Please try again later!\")\n             console.log(error)\n         }\n    }\n\n    return(\n        <div>\n            <input type = \"text\" value = {username} placeholder = \"Username\"\n            onChange = {(evt) =>{setUsername(evt.target.value)}}\n            ></input>\n             <input type = \"text\" value = {password} placeholder = \"Password\"\n            onChange = {(evt) =>{setPassword(evt.target.value)}}\n            ></input>\n            <button\n            onClick = {(evt) => signup({username, password})}\n            >Signup</button>\n            <button\n            onClick = {(evt) => login({username, password})}\n            >Login</button>\n            <div>{error}</div>\n            \n            <h1>Hello, {props.username}</h1>\n        </div>\n    )\n}\nfunction mapStateToProps(state){\n    return{\n        username: state.user.name,\n        userId: state.user.id\n    }\n}\n\nconst mapDispatchToProps = {\n    setCurrentUser,\n    setCurrentId\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import {ADD_TO_DECK, REMOVE_FROM_DECK} from \"../Actions\"\n\nlet counter = 0;\nconst initialState = {\n    mainDeck: [],\n    extraDeck: []};\nexport default function DeckReducer(state = initialState, action){\n    switch(action.type){\n        case ADD_TO_DECK:\n            counter = 0;\n            state.extraDeck.map((v)=> {\n                v.id === action.card.id && (counter = counter +1)\n                //console.log(action.card.id)\n                return counter\n            })\n            state.mainDeck.map((v)=> {\n                v.id === action.card.id && (counter = counter +1)\n                //console.log(state.mainDeck)\n                return counter\n            })\n            if(\n                action.card.type === \"Fusion Monster\" ||\n                action.card.type === \"Synchro Monster\" ||\n                action.card.type === \"Synchro Tuner Monster\" ||\n                action.card.type === \"Synchro Monster\" ||\n                action.card.type === \"XYZ Monster\"\n            )\n            {\n                if(state.extraDeck.length < 7)\n                {\n                    if(counter < 3)\n                    {\n                        console.log(state.extraDeck)\n                    return({...state, extraDeck: [...state.extraDeck, action.card]})\n                    }\n                    else return state\n                }\n                else return state\n            }\n            else\n            {\n                if(state.mainDeck.length < 30)\n                {\n                    if(counter < 3)\n                    {\n                        return({...state, mainDeck: [...state.mainDeck, action.card]})\n                    }\n                else return state\n                }\n                else return state\n            }\n            //return([...state, action.card])\n        case REMOVE_FROM_DECK:\n            if(\n                action.card.type === \"Fusion Monster\" ||\n                action.card.type === \"Synchro Monster\" ||\n                action.card.type === \"Synchro Tuner Monster\" ||\n                action.card.type === \"Synchro Monster\" ||\n                action.card.type === \"XYZ Monster\"\n            )\n            {\n                let newExtraDeck = [...state.extraDeck]\n                let idxE = newExtraDeck.findIndex((v)=> v.id === action.card.id)\n                newExtraDeck.splice(idxE, 1)\n\n                return ({...state, extraDeck:[...newExtraDeck]})\n            }\n            else\n            {\n            let newMainDeck = [...state.mainDeck]\n            let idxM = newMainDeck.findIndex((v)=> v.id === action.card.id)\n            newMainDeck.splice(idxM, 1)\n            console.log(newMainDeck)\n            return ({...state, mainDeck: [...newMainDeck]})\n            }\n            \n        default:\n            return state;\n    }\n\n}","import {SET_CURRENT_NAME} from \"../Actions\"\nimport {SET_CURRENT_ID} from \"../Actions\"\nimport {CLEAR_USER} from \"../Actions\"\n\nconst initialState = \n{\n    name: \"\",\n    id: 0,\n};\nexport default function UserReducer(state = initialState, action){\n    switch(action.type){\n        case SET_CURRENT_NAME:\n            return({...state, name: action.name})\n        case SET_CURRENT_ID:\n            return({...state, id: action.id})\n        case CLEAR_USER:\n            return({...state, name: \"\", id: 0})\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\"\nimport DeckReducer from \"./DeckReducer\"\nimport SearchReducer from \"./SearchReducer\"\nimport UserReducer from \"./UserReducer\"\n\nconst rootReducer = combineReducers({\n    deck: DeckReducer,\n    search: SearchReducer,\n    user: UserReducer,\n})\n\nexport default rootReducer;","import {SET_SEARCH} from \"../Actions\"\nimport {CLEAR_SEARCH} from \"../Actions\"\n\nconst initialState = \"\";\nexport default function SearchReducer(state = initialState, action){\n    switch(action.type){\n        case SET_SEARCH:\n            return(action.search)\n        case CLEAR_SEARCH:\n            return(initialState)\n        default:\n            return state;\n    }\n\n}","import {createStore} from \"redux\"\nimport rootReducer from \"./Reducers\"\n\nexport default createStore(rootReducer)","export const userSelector = (state) => state.user;\nexport const usernameSelector = (state) => state.user.name;\nexport const userIdSelector = (state) => state.user.id;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({ isAuth, authRequired, component, path }) => {\n  const redirect = authRequired ? \"/login\" : \"/search\";\n\n  if ((authRequired && !isAuth) || (!authRequired && isAuth)) {\n    return <Redirect to={redirect} />;\n  }\n  return <Route path={path} component={component} />;\n};\n\nexport default ProtectedRoute;","import DeckBuilder from \"./components/deckBuilder\"\nimport DuelSim from \"./components/duelSim\"\nimport Deck from \"./components/deck\"\nimport Login from \"./components/login\"\nimport './App.css';\nimport store from \"./Redux/store\"\nimport {Provider} from \"react-redux\"\nimport {useSelectors, useActionCreators} from \"use-redux\"\nimport {usernameSelector, userSelector} from \"./Redux/Selectors\"\nimport {Switch, Route, BrowserRouter, Redirect, NavLink, useHistory} from \"react-router-dom\"\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport{clearUser, setCurrentUser} from \"./Redux/Actions\"\nimport axios from \"axios\"\nimport ProtectedRoute from \"./components/shared/ProtectedRoute\"\n\nfunction App() {\n  const history = useHistory;\n  const [clearUserFromState, setUserInState] = useActionCreators(clearUser, setCurrentUser)\n  const [username, user] = useSelectors(usernameSelector, userSelector);\n\n  \n  const isAuth = useMemo(() => {\n    return username.length > 0;\n  }, [user])\n  useEffect(async () =>{\n    try{\n    const json = await axios.get(\"/users/authenticate\")\n    if(json.data.success){\n      setUserInState(json.data.data.username)\n    }\n  }\n  catch(err){}\n  }, [])\n  async function logout(){\n    try{\n    const {data} = await axios(\"/users/logout\")\n    clearUserFromState();\n    }\n    catch(err)\n    {\n      console.log(\"Well that shouldn' have happened\")\n    }\n  }\n  return (\n    \n    <Provider store = {store}>\n      <BrowserRouter>\n        <main>\n          <div className = \"siteTitle\">Duel Links Deck Builder</div>\n        <nav>\n          {username.length === 0 && \n          <NavLink className = \"link\" activeClassName = \"activeLink\" to =\"/login\">Login</NavLink> }\n          {username.length > 0 &&\n          <NavLink className = \"link\" activeClassName = \"activeLink\" to =\"/deckBuilder\">Deck Builder</NavLink>}\n          {username.length > 0 &&\n          <NavLink className = \"link\" activeClassName = \"activeLink\" to =\"/duelSim\">Duel Simulator</NavLink>}\n          {username.length > 0 &&\n          <NavLink className = \"link\" activeClassName = \"activeLink\" to =\"/deck\">Deck</NavLink>}\n          {username.length > 0 &&\n          <NavLink className = \"logout\" onClick = {() =>{logout()}} to =\"/login\">Logout</NavLink>}\n\n        </nav>\n          <Switch>\n          <ProtectedRoute isAuth = {isAuth} authRequired = {false} path = \"/login\" component = {Login}></ProtectedRoute>\n          <ProtectedRoute isAuth = {isAuth} authRequired = {true} path = \"/deckBuilder\" component = {DeckBuilder}></ProtectedRoute>\n          <ProtectedRoute isAuth = {isAuth} authRequired = {true} path = \"/DuelSim\" component = {DuelSim}></ProtectedRoute>\n          <ProtectedRoute isAuth = {isAuth} authReauired = {true} path = \"/deck\" component = {Deck}></ProtectedRoute>\n          <Route path = \"*\">\n            <Redirect to =\"/login\"/>\n          </Route>\n          </Switch>\n        </main>\n    </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\"\nimport store from \"./Redux/store\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}